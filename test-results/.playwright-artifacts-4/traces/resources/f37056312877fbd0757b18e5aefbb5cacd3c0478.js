"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[2223],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return g}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(a),d=r,g=p["".concat(s,".").concat(d)]||p[d]||m[d]||l;return a?n.createElement(g,i(i({ref:t},u),{},{components:a})):n.createElement(g,i({ref:t},u))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},9247:function(e,t,a){a.d(t,{Z:function(){return p}});var n=a(7294),r=a(6010),l="tabItem_Ymn6",i=Object.defineProperty,o=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,u=(e,t,a)=>t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a;function p({children:e,hidden:t,className:a}){return n.createElement("div",((e,t)=>{for(var a in t||(t={}))s.call(t,a)&&u(e,a,t[a]);if(o)for(var a of o(t))c.call(t,a)&&u(e,a,t[a]);return e})({role:"tabpanel",className:(0,r.Z)(l,a)},{hidden:t}),e)}},4023:function(e,t,a){a.d(t,{Z:function(){return z}});var n=a(7294),r=a(6010),l=a(7287),i=a(6550),o=a(3962),s=a(9920),c=a(5801),u=Object.defineProperty,p=Object.defineProperties,m=Object.getOwnPropertyDescriptors,d=Object.getOwnPropertySymbols,g=Object.prototype.hasOwnProperty,f=Object.prototype.propertyIsEnumerable,b=(e,t,a)=>t in e?u(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a;function h(e){return function(e){var t,a;return null!=(a=null==(t=n.Children.map(e,(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:t.filter(Boolean))?a:[]}(e).map((({props:{value:e,label:t,attributes:a,default:n}})=>({value:e,label:t,attributes:a,default:n})))}function v(e){const{values:t,children:a}=e;return(0,n.useMemo)((()=>{const e=null!=t?t:h(a);return function(e){const t=(0,s.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function y({value:e,tabValues:t}){return t.some((t=>t.value===e))}function w({queryString:e=!1,groupId:t}){const a=(0,i.k6)(),r=function({queryString:e=!1,groupId:t}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=t?t:null}({queryString:e,groupId:t});return[(0,o._X)(r),(0,n.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(a.location.search);var n,l;t.set(r,e),a.replace((n=((e,t)=>{for(var a in t||(t={}))g.call(t,a)&&b(e,a,t[a]);if(d)for(var a of d(t))f.call(t,a)&&b(e,a,t[a]);return e})({},a.location),l={search:t.toString()},p(n,m(l))))}),[r,a])]}function k(e){const{defaultValue:t,queryString:a=!1,groupId:r}=e,l=v(e),[i,o]=(0,n.useState)((()=>function({defaultValue:e,tabValues:t}){var a;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!y({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const n=null!=(a=t.find((e=>e.default)))?a:t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:l}))),[s,u]=w({queryString:a,groupId:r}),[p,m]=function({groupId:e}){const t=function(e){return e?`docusaurus.tab.${e}`:null}(e),[a,r]=(0,c.Nk)(t);return[a,(0,n.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:r}),d=(()=>{const e=null!=s?s:p;return y({value:e,tabValues:l})?e:null})();(0,n.useLayoutEffect)((()=>{d&&o(d)}),[d]);return{selectedValue:i,selectValue:(0,n.useCallback)((e=>{if(!y({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),m(e)}),[u,m,l]),tabValues:l}}var x=a(5710),T="tabList__CuJ",N="tabItem_LNqP",j=Object.defineProperty,C=Object.defineProperties,I=Object.getOwnPropertyDescriptors,O=Object.getOwnPropertySymbols,E=Object.prototype.hasOwnProperty,P=Object.prototype.propertyIsEnumerable,Z=(e,t,a)=>t in e?j(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,S=(e,t)=>{for(var a in t||(t={}))E.call(t,a)&&Z(e,a,t[a]);if(O)for(var a of O(t))P.call(t,a)&&Z(e,a,t[a]);return e};function V({className:e,block:t,selectedValue:a,selectValue:i,tabValues:o}){const s=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.o5)(),u=e=>{const t=e.currentTarget,n=s.indexOf(t),r=o[n].value;r!==a&&(c(t),i(r))},p=e=>{var t,a;let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const a=s.indexOf(e.currentTarget)+1;n=null!=(t=s[a])?t:s[0];break}case"ArrowLeft":{const t=s.indexOf(e.currentTarget)-1;n=null!=(a=s[t])?a:s[s.length-1];break}}null==n||n.focus()};return n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},e)},o.map((({value:e,label:t,attributes:l})=>{return n.createElement("li",(i=S({role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,key:e,ref:e=>s.push(e),onKeyDown:p,onClick:u},l),o={className:(0,r.Z)("tabs__item",N,null==l?void 0:l.className,{"tabs__item--active":a===e})},C(i,I(o))),null!=t?t:e);var i,o})))}function D({lazy:e,children:t,selectedValue:a}){const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const e=r.find((e=>e.props.value===a));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return n.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function L(e){const t=k(e);return n.createElement("div",{className:(0,r.Z)("tabs-container",T)},n.createElement(V,S(S({},e),t)),n.createElement(D,S(S({},e),t)))}function z(e){const t=(0,x.Z)();return n.createElement(L,S({key:String(t)},e))}},5300:function(e,t,a){a.r(t),a.d(t,{assets:function(){return h},contentTitle:function(){return f},default:function(){return w},frontMatter:function(){return g},metadata:function(){return b},toc:function(){return v}});var n=a(3905),r=a(4023),l=a(9247),i=Object.defineProperty,o=Object.defineProperties,s=Object.getOwnPropertyDescriptors,c=Object.getOwnPropertySymbols,u=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,m=(e,t,a)=>t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,d=(e,t)=>{for(var a in t||(t={}))u.call(t,a)&&m(e,a,t[a]);if(c)for(var a of c(t))p.call(t,a)&&m(e,a,t[a]);return e};const g={id:"emulation",title:"Emulation"},f=void 0,b={unversionedId:"emulation",id:"version-stable/emulation",title:"Emulation",description:"Introduction",source:"@site/versioned_docs/version-stable/emulation.mdx",sourceDirName:".",slug:"/emulation",permalink:"/docs/emulation",draft:!1,tags:[],version:"stable",frontMatter:{id:"emulation",title:"Emulation"},sidebar:"docs",previous:{title:"Command line",permalink:"/docs/test-cli"},next:{title:"Fixtures",permalink:"/docs/test-fixtures"}},h={},v=[{value:"Introduction",id:"introduction",level:2},{value:"Devices",id:"devices",level:2},{value:"Viewport",id:"viewport",level:2},{value:"isMobile",id:"ismobile",level:2},{value:"Locale &amp; Timezone",id:"locale--timezone",level:2},{value:"Permissions",id:"permissions",level:2},{value:"Geolocation",id:"geolocation",level:2},{value:"Color Scheme and Media",id:"color-scheme-and-media",level:2},{value:"User Agent",id:"user-agent",level:2},{value:"Offline",id:"offline",level:2},{value:"JavaScript Enabled",id:"javascript-enabled",level:2}],y={toc:v};function w(e){var t,a=e,{components:i}=a,m=((e,t)=>{var a={};for(var n in e)u.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(null!=e&&c)for(var n of c(e))t.indexOf(n)<0&&p.call(e,n)&&(a[n]=e[n]);return a})(a,["components"]);return(0,n.kt)("wrapper",(t=d(d({},y),m),o(t,s({components:i,mdxType:"MDXLayout"}))),(0,n.kt)("h2",d({},{id:"introduction"}),"Introduction"),(0,n.kt)("p",null,"With Playwright you can test your app on any browser as well as emulate a real device such as a mobile phone or tablet. Simply configure the devices you would like to emulate and Playwright will simulate the browser behavior such as ",(0,n.kt)("inlineCode",{parentName:"p"},'"userAgent"'),", ",(0,n.kt)("inlineCode",{parentName:"p"},'"screenSize"'),", ",(0,n.kt)("inlineCode",{parentName:"p"},'"viewport"')," and if it ",(0,n.kt)("inlineCode",{parentName:"p"},'"hasTouch"')," enabled. You can also emulate the ",(0,n.kt)("inlineCode",{parentName:"p"},'"geolocation"'),", ",(0,n.kt)("inlineCode",{parentName:"p"},'"locale"')," and ",(0,n.kt)("inlineCode",{parentName:"p"},'"timezone"')," for all tests or for a specific test as well as set the ",(0,n.kt)("inlineCode",{parentName:"p"},'"permissions"')," to show notifications or change the ",(0,n.kt)("inlineCode",{parentName:"p"},'"colorScheme"'),"."),(0,n.kt)("h2",d({},{id:"devices"}),"Devices"),(0,n.kt)("p",null,"Playwright comes with a ",(0,n.kt)("a",d({parentName:"p"},{href:"https://github.com/microsoft/playwright/blob/main/packages/playwright-core/src/server/deviceDescriptorsSource.json"}),"registry of device parameters")," using ",(0,n.kt)("a",d({parentName:"p"},{href:"/docs/api/class-playwright#playwright-devices"}),"playwright.devices")," for selected desktop, tablet and mobile devices. It can be used to simulate browser behavior for a specific device such as user agent, screen size, viewport and if it has touch enabled. All tests will run with the specified device parameters."),(0,n.kt)(r.Z,{groupId:"js-flavor",defaultValue:"test",values:[{label:"Test",value:"test"},{label:"Library",value:"library"}],mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"test",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js",metastring:'title="playwright.config.ts"',title:'"playwright.config.ts"'}),"import { defineConfig, devices } from '@playwright/test'; // import devices\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: {\n        ...devices['Desktop Chrome'],\n      },\n    },\n    {\n      name: 'Mobile Safari',\n      use: {\n        ...devices['iPhone 13'],\n      },\n    },\n  ],\n});\n"))),(0,n.kt)(l.Z,{value:"library",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js"}),"const { chromium, devices } = require('playwright');\nconst browser = await chromium.launch();\n\nconst iphone13 = devices['iPhone 13'];\nconst context = await browser.newContext({\n  ...iphone13,\n});\n")))),(0,n.kt)("img",{width:"458",alt:"playwright.dev website emulated for iPhone 13",src:"https://user-images.githubusercontent.com/13063165/220411073-76fe59f9-9a2d-463d-8e30-c19a7deca133.png"}),(0,n.kt)("h2",d({},{id:"viewport"}),"Viewport"),(0,n.kt)("p",null,"The viewport is included in the device but you can override it for some tests with ",(0,n.kt)("a",d({parentName:"p"},{href:"/docs/api/class-page#page-set-viewport-size"}),"page.setViewportSize()"),"."),(0,n.kt)(r.Z,{groupId:"js-flavor",defaultValue:"test",values:[{label:"Test",value:"test"},{label:"Library",value:"library"}],mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"test",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js",metastring:'title="playwright.config.ts"',title:'"playwright.config.ts"'}),"import { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: {\n        ...devices['Desktop Chrome'],\n        // It is important to define the `viewport` property after destructuring `devices`,\n        // since devices also define the `viewport` for that device.\n        viewport: { width: 1280, height: 720 },\n      },\n    },\n  ]\n});\n"))),(0,n.kt)(l.Z,{value:"library",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js"}),"// Create context with given viewport\nconst context = await browser.newContext({\n  viewport: { width: 1280, height: 1024 }\n});\n")))),(0,n.kt)("p",null,"Test file:"),(0,n.kt)(r.Z,{groupId:"js-flavor",defaultValue:"test",values:[{label:"Test",value:"test"},{label:"Library",value:"library"}],mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"test",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js",metastring:'title="tests/example.spec.ts"',title:'"tests/example.spec.ts"'}),"import { test, expect } from '@playwright/test';\n\ntest.use({\n  viewport: { width: 1600, height: 1200 },\n});\n\ntest('my test', async ({ page }) => {\n  // ...\n});\n"))),(0,n.kt)(l.Z,{value:"library",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js"}),"// Create context with given viewport\nconst context = await browser.newContext({\n  viewport: { width: 1280, height: 1024 }\n});\n\n// Resize viewport for individual page\nawait page.setViewportSize({ width: 1600, height: 1200 });\n\n// Emulate high-DPI\nconst context = await browser.newContext({\n  viewport: { width: 2560, height: 1440 },\n  deviceScaleFactor: 2,\n});\n")))),(0,n.kt)("p",null,"The same works inside a test file."),(0,n.kt)(r.Z,{groupId:"js-flavor",defaultValue:"test",values:[{label:"Test",value:"test"},{label:"Library",value:"library"}],mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"test",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js",metastring:'title="tests/example.spec.ts"',title:'"tests/example.spec.ts"'}),"import { test, expect } from '@playwright/test';\n\ntest.describe('specific viewport block', () => {\n  test.use({ viewport: { width: 1600, height: 1200 } });\n\n  test('my test', async ({ page }) => {\n    // ...\n  });\n});\n"))),(0,n.kt)(l.Z,{value:"library",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js"}),"// Create context with given viewport\nconst context = await browser.newContext({\n  viewport: { width: 1600, height: 1200 }\n});\nconst page = await context.newPage();\n")))),(0,n.kt)("h2",d({},{id:"ismobile"}),"isMobile"),(0,n.kt)("p",null,"Whether the meta viewport tag is taken into account and touch events are enabled."),(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js",metastring:'title="playwright.config.ts"',title:'"playwright.config.ts"'}),"import { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: {\n        ...devices['Desktop Chrome'],\n        // It is important to define the `isMobile` property after destructuring `devices`,\n        // since devices also define the `isMobile` for that device.\n        isMobile: false,\n      },\n    },\n  ]\n});\n")),(0,n.kt)("h2",d({},{id:"locale--timezone"}),"Locale & Timezone"),(0,n.kt)("p",null,"Emulate the user Locale and Timezone which can be set globally for all tests in the config and then overridden for particular tests."),(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js",metastring:'title="playwright.config.ts"',title:'"playwright.config.ts"'}),"import { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    // Emulates the user locale.\n    locale: 'en-GB',\n\n    // Emulates the user timezone.\n    timezoneId: 'Europe/Paris',\n  },\n});\n")),(0,n.kt)(r.Z,{groupId:"js-flavor",defaultValue:"test",values:[{label:"Test",value:"test"},{label:"Library",value:"library"}],mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"test",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js",metastring:'title="tests/example.spec.ts"',title:'"tests/example.spec.ts"'}),"import { test, expect } from '@playwright/test';\n\ntest.use({\n  locale: 'de-DE',\n  timezoneId: 'Europe/Berlin',\n});\n\ntest('my test for de lang in Berlin timezone', async ({ page }) => {\n  await page.goto('https://www.bing.com');\n  // ...\n});\n"))),(0,n.kt)(l.Z,{value:"library",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js"}),"const context = await browser.newContext({\n  locale: 'de-DE',\n  timezoneId: 'Europe/Berlin',\n});\n")))),(0,n.kt)("img",{width:"1394",alt:"Bing in german lang and timezone",src:"https://user-images.githubusercontent.com/13063165/220416571-ccc96ab1-44bb-4579-8430-64502fc24a15.png"}),(0,n.kt)("h2",d({},{id:"permissions"}),"Permissions"),(0,n.kt)("p",null,"Allow app to show system notifications."),(0,n.kt)(r.Z,{groupId:"js-flavor",defaultValue:"test",values:[{label:"Test",value:"test"},{label:"Library",value:"library"}],mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"test",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js",metastring:'title="playwright.config.ts"',title:'"playwright.config.ts"'}),"import { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    // Grants specified permissions to the browser context.\n    permissions: ['notifications'],\n  },\n});\n"))),(0,n.kt)(l.Z,{value:"library",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js"}),"const context = await browser.newContext({\n  permissions: ['notifications'],\n});\n")))),(0,n.kt)("p",null,"Allow notifications for a specific domain."),(0,n.kt)(r.Z,{groupId:"js-flavor",defaultValue:"test",values:[{label:"Test",value:"test"},{label:"Library",value:"library"}],mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"test",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js",metastring:'title="tests/example.spec.ts"',title:'"tests/example.spec.ts"'}),"import { test } from '@playwright/test';\n\ntest.beforeEach(async ({ context }) => {\n  // Runs before each test and signs in each page.\n  await context.grantPermissions(['notifications'], { origin: 'https://skype.com' });\n});\n\ntest('first', async ({ page }) => {\n  // page has notifications permission for https://skype.com.\n});\n"))),(0,n.kt)(l.Z,{value:"library",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js"}),"await context.grantPermissions(['notifications'], { origin: 'https://skype.com' });\n")))),(0,n.kt)("p",null,"Revoke all permissions with ",(0,n.kt)("a",d({parentName:"p"},{href:"/docs/api/class-browsercontext#browser-context-clear-permissions"}),"browserContext.clearPermissions()"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js"}),"// Library\nawait context.clearPermissions();\n")),(0,n.kt)("h2",d({},{id:"geolocation"}),"Geolocation"),(0,n.kt)("p",null,"Grant ",(0,n.kt)("inlineCode",{parentName:"p"},'"geolocation"')," permissions and set geolocation to a specific area."),(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js",metastring:'title="playwright.config.ts"',title:'"playwright.config.ts"'}),"import { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    // Context geolocation\n    geolocation: { longitude: 12.492507, latitude: 41.889938 },\n    permissions: ['geolocation'],\n  },\n});\n")),(0,n.kt)(r.Z,{groupId:"js-flavor",defaultValue:"test",values:[{label:"Test",value:"test"},{label:"Library",value:"library"}],mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"test",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js",metastring:'title="tests/example.spec.ts"',title:'"tests/example.spec.ts"'}),"import { test, expect } from '@playwright/test';\n\ntest.use({\n  geolocation: { longitude: 41.890221, latitude: 12.492348 },\n  permissions: ['geolocation'],\n});\n\ntest('my test with geolocation', async ({ page }) => {\n  // ...\n});\n"))),(0,n.kt)(l.Z,{value:"library",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js"}),"const context = await browser.newContext({\n  geolocation: { longitude: 41.890221, latitude: 12.492348 },\n  permissions: ['geolocation']\n});\n\n")))),(0,n.kt)("img",{width:"1394",alt:"geolocation for italy on bing maps",src:"https://user-images.githubusercontent.com/13063165/220417670-bb22d815-f5cd-47c4-8562-0b88165eac27.png"}),(0,n.kt)("p",null,"Change the location later:"),(0,n.kt)(r.Z,{groupId:"js-flavor",defaultValue:"test",values:[{label:"Test",value:"test"},{label:"Library",value:"library"}],mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"test",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js",metastring:'title="tests/example.spec.ts"',title:'"tests/example.spec.ts"'}),"import { test, expect } from '@playwright/test';\n\ntest.use({\n  geolocation: { longitude: 41.890221, latitude: 12.492348 },\n  permissions: ['geolocation'],\n});\n\ntest('my test with geolocation', async ({ page, context }) => {\n  // overwrite the location for this test\n  await context.setGeolocation({ longitude: 48.858455, latitude: 2.294474 });\n});\n"))),(0,n.kt)(l.Z,{value:"library",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js"}),"await context.setGeolocation({ longitude: 48.858455, latitude: 2.294474 });\n")))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Note")," you can only change geolocation for all pages in the context."),(0,n.kt)("h2",d({},{id:"color-scheme-and-media"}),"Color Scheme and Media"),(0,n.kt)("p",null,"Emulate the users ",(0,n.kt)("inlineCode",{parentName:"p"},'"colorScheme"'),". Supported values are 'light', 'dark', 'no-preference'. You can also emulate the media type with ",(0,n.kt)("a",d({parentName:"p"},{href:"/docs/api/class-page#page-emulate-media"}),"page.emulateMedia()"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js",metastring:'title="playwright.config.ts"',title:'"playwright.config.ts"'}),"import { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    colorScheme: 'dark',\n  },\n});\n")),(0,n.kt)(r.Z,{groupId:"js-flavor",defaultValue:"test",values:[{label:"Test",value:"test"},{label:"Library",value:"library"}],mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"test",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js",metastring:'title="tests/example.spec.ts"',title:'"tests/example.spec.ts"'}),"import { test, expect } from '@playwright/test';\n\ntest.use({\n  colorScheme: 'dark' // or 'light'\n});\n\ntest('my test with dark mode', async ({ page }) => {\n  // ...\n});\n"))),(0,n.kt)(l.Z,{value:"library",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js"}),"// Create context with dark mode\nconst context = await browser.newContext({\n  colorScheme: 'dark' // or 'light'\n});\n\n// Create page with dark mode\nconst page = await browser.newPage({\n  colorScheme: 'dark' // or 'light'\n});\n\n// Change color scheme for the page\nawait page.emulateMedia({ colorScheme: 'dark' });\n\n// Change media for page\nawait page.emulateMedia({ media: 'print' });\n")))),(0,n.kt)("img",{width:"1394",alt:"playwright web in dark mode",src:"https://user-images.githubusercontent.com/13063165/220411638-55d2b051-4678-4da7-9f0b-ed22f5a3c47c.png"}),(0,n.kt)("h2",d({},{id:"user-agent"}),"User Agent"),(0,n.kt)("p",null,"The User Agent is included in the device and therefore you  will rarely need to change it however if you do need to test a different user agent you can override it with the ",(0,n.kt)("inlineCode",{parentName:"p"},"userAgent")," property."),(0,n.kt)(r.Z,{groupId:"js-flavor",defaultValue:"test",values:[{label:"Test",value:"test"},{label:"Library",value:"library"}],mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"test",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js",metastring:'title="tests/example.spec.ts"',title:'"tests/example.spec.ts"'}),"import { test, expect } from '@playwright/test';\n\ntest.use({ userAgent: 'My user agent' });\n\ntest('my user agent test', async ({ page }) => {\n  // ...\n});\n"))),(0,n.kt)(l.Z,{value:"library",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js"}),"const context = await browser.newContext({\n  userAgent: 'My user agent'\n});\n")))),(0,n.kt)("h2",d({},{id:"offline"}),"Offline"),(0,n.kt)("p",null,"Emulate the network being offline."),(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js",metastring:'title="playwright.config.ts"',title:'"playwright.config.ts"'}),"import { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  use: {\n    offline: true\n  },\n});\n")),(0,n.kt)("h2",d({},{id:"javascript-enabled"}),"JavaScript Enabled"),(0,n.kt)("p",null,"Emulate a user scenario where JavaScript is disabled."),(0,n.kt)(r.Z,{groupId:"js-flavor",defaultValue:"test",values:[{label:"Test",value:"test"},{label:"Library",value:"library"}],mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"test",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js",metastring:'title="tests/example.spec.ts"',title:'"tests/example.spec.ts"'}),"import { test, expect } from '@playwright/test';\n\ntest.use({ javaScriptEnabled: false });\n\ntest('test with no JavaScript', async ({ page }) => {\n  // ...\n});\n"))),(0,n.kt)(l.Z,{value:"library",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",d({parentName:"pre"},{className:"language-js"}),"const context = await browser.newContext({\n  javaScriptEnabled: false\n});\n")))))}w.isMDXComponent=!0}}]);