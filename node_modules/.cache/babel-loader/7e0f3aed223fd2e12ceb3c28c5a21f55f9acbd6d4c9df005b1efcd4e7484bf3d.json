{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"normalizeLocalePath\", {\n  enumerable: true,\n  get: function () {\n    return normalizeLocalePath;\n  }\n});\nfunction normalizeLocalePath(pathname, locales) {\n  let detectedLocale;\n  // first item will be empty string from splitting at first char\n  const pathnameParts = pathname.split(\"/\");\n  (locales || []).some(locale => {\n    if (pathnameParts[1] && pathnameParts[1].toLowerCase() === locale.toLowerCase()) {\n      detectedLocale = locale;\n      pathnameParts.splice(1, 1);\n      pathname = pathnameParts.join(\"/\") || \"/\";\n      return true;\n    }\n    return false;\n  });\n  return {\n    pathname,\n    detectedLocale\n  };\n}","map":{"version":3,"names":["normalizeLocalePath","pathname","locales","detectedLocale","pathnameParts","split","some","locale","toLowerCase","splice","join"],"sources":["../../../../src/shared/lib/i18n/normalize-locale-path.ts"],"sourcesContent":[null],"mappings":";;;;;+BAcgB;;;WAAAA,mBAAA;;;AAAT,SAASA,oBACdC,QAAgB,EAChBC,OAAkB,EACN;EACZ,IAAIC,cAAA;EACJ;EACA,MAAMC,aAAA,GAAgBH,QAAA,CAASI,KAAK,CAAC;EAEnC,CAAAH,OAAA,IAAW,EAAE,EAAEI,IAAI,CAAEC,MAAA,IAAW;IAChC,IACEH,aAAa,CAAC,EAAE,IAChBA,aAAa,CAAC,EAAE,CAACI,WAAW,OAAOD,MAAA,CAAOC,WAAW,IACrD;MACAL,cAAA,GAAiBI,MAAA;MACjBH,aAAA,CAAcK,MAAM,CAAC,GAAG;MACxBR,QAAA,GAAWG,aAAA,CAAcM,IAAI,CAAC,QAAQ;MACtC,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd;EAEA,OAAO;IACLT,QAAA;IACAE;EACF;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}